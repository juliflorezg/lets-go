package main

import (
	"bytes"
	"io"
	"log/slog"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/juliflorezg/lets-go/internal/assert"
)

func TestPing(t *testing.T) {
	// // Initialize a new httptest.ResponseRecorder.
	// rr := httptest.NewRecorder()

	// // Initialize a new dummy http.Request.
	// r, err := http.NewRequest(http.MethodGet, "/", nil)
	// if err != nil {
	// 	t.Fatal(err)
	// }

	// // Call the ping handler function, passing in the
	// // httptest.ResponseRecorder and http.Request.
	// ping(rr, r)

	// // Call the Result() method on the http.ResponseRecorder to get the
	// // http.Response (request response) generated by the ping handler.
	// rs := rr.Result()

	// // Check that the status code written by the ping handler was 200.
	// assert.Equal(t, rs.StatusCode, http.StatusOK)

	// // And we can check that the response body written by the ping handler
	// // equals "OK"
	// defer rs.Body.Close()
	// body, err := io.ReadAll(rs.Body)
	// if err != nil {
	// 	t.Fatal(err)
	// }

	// body = bytes.TrimSpace(body)
	// assert.Equal(t, string(body), "OK")

	//~ E2E test of ping handler

	// Create a new instance of our application struct. For now, this just
	// contains a structured logger (which discards anything written to it)
	app := application{
		logger: slog.New(slog.NewTextHandler(io.Discard, nil)),
	}

	// We then use the httptest.NewTLSServer() function to create a new test
	// server, passing in the value returned by our app.routes() method as the
	// handler for the server. This starts up a HTTPS server which listens on a
	// randomly-chosen port of your local machine for the duration of the test.
	// Notice that we defer a call to ts.Close() so that the server is shutdown
	// when the test finishes
	ts := httptest.NewTLSServer(app.routes())
	defer ts.Close()

	rs, err := ts.Client().Get(ts.URL + "/ping")
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, rs.StatusCode, http.StatusOK)

	defer rs.Body.Close()
	body, err := io.ReadAll(rs.Body)
	if err != nil {
		t.Fatal(err)
	}
	body = bytes.TrimSpace(body)

	assert.Equal(t, string(body), "OK")
}
