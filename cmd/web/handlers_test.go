package main

import (
	"net/http"
	"testing"

	"github.com/juliflorezg/lets-go/internal/assert"
)

func TestPing(t *testing.T) {
	// // Initialize a new httptest.ResponseRecorder.
	// rr := httptest.NewRecorder()

	// // Initialize a new dummy http.Request.
	// r, err := http.NewRequest(http.MethodGet, "/", nil)
	// if err != nil {
	// 	t.Fatal(err)
	// }

	// // Call the ping handler function, passing in the
	// // httptest.ResponseRecorder and http.Request.
	// ping(rr, r)

	// // Call the Result() method on the http.ResponseRecorder to get the
	// // http.Response (request response) generated by the ping handler.
	// rs := rr.Result()

	// // Check that the status code written by the ping handler was 200.
	// assert.Equal(t, rs.StatusCode, http.StatusOK)

	// // And we can check that the response body written by the ping handler
	// // equals "OK"
	// defer rs.Body.Close()
	// body, err := io.ReadAll(rs.Body)
	// if err != nil {
	// 	t.Fatal(err)
	// }

	// body = bytes.TrimSpace(body)
	// assert.Equal(t, string(body), "OK")

	//~ E2E test of ping handler

	// Create a new instance of our application struct. For now, this just
	// contains a structured logger (which discards anything written to it)
	app := NewTestApplication(t)

	ts := NewTestServer(t, app.routes())
	defer ts.Close()

	status, _, body := ts.get(t, "/ping")

	assert.Equal(t, status, http.StatusOK)
	assert.Equal(t, body, "OK")
}

func TestSnippetView(t *testing.T) {
	// create a new test struct app
	app := NewTestApplication(t)

	// create a new test server
	ts := NewTestServer(t, app.routes())
	defer ts.Close()

	// define the struct for table-driven tests
	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody string
	}{
		{
			name:     "Valid ID",
			urlPath:  "/snippet/view/1",
			wantCode: http.StatusOK,
			wantBody: "Sample content for snippet 1",
		},

		{
			name:     "Non-existent ID",
			urlPath:  "/snippet/view/2",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Negative ID",
			urlPath:  "/snippet/view/-5",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Decimal ID",
			urlPath:  "/snippet/view/1.234",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "String ID",
			urlPath:  "/snippet/view/abc",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Empty ID",
			urlPath:  "/snippet/view/",
			wantCode: http.StatusNotFound,
		},
	}

	// do the sub-tests
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			code, _, body := ts.get(t, tt.urlPath)

			assert.Equal(t, code, tt.wantCode)
			if tt.wantBody != "" {
				assert.StringContains(t, body, tt.wantBody)
			}
		})
	}

}
